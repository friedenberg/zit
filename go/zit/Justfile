
build-go-generate:
  go generate ./...

build-go-binary:
  go build -o build/zit ./.

build-go-all: build-go-generate build-go-binary

build-all: build-go-all

test-go-vet:
  go vet ./... || true

test-go-unit:
  go test -v ./...

test-go-all: test-go-vet test-go-unit

test-bats-generate:
  ./zz-tests_bats/migration/generate_fixture.bash

bats_timeout := "10"

test-bats *targets="zz-tests_bats/*.bats":
  BATS_TEST_TIMEOUT="{{bats_timeout}}" bats --tap --jobs {{num_cpus()}} {{targets}}

test-bats-integration: (test-bats "zz-tests_bats/*.bats")
test-bats-migration: (test-bats "zz-tests_bats/migration/*.bats")

test-bats-all: test-bats-generate \
    (test-bats "zz-tests_bats/*.bats" "zz-tests_bats/migration/*.bats")

test-all: test-go-all test-bats-all

build-and-test-all: build-all test-all

git-add-and-commit *PATHS:
  #! /usr/bin/env fish
  set -l argv {{PATHS}}
  if test (count $argv) -gt 0
    git add $argv
  end

  set -l diff_status (git diff --cached 2>&1)

  if test -n "$diff_status"
    echo "committing..." >&2

    if not git commit -m update
      return 1
    end
  else
    echo "no changes, just pushing" >&2
  end

  echo "pushing..." >&2
  git push
  
commit: \
    build-and-test-all \
    (git-add-and-commit "." "../../{zz-pandoc,zz-vim,zz-tests_bats}")
